{"version":3,"sources":["fbase.js","components/AuthForm.js","routes/Auth.js","components/Chat.js","components/ChatMaker.js","routes/Home.js","routes/Profile.js","components/Navigation.js","components/AppRouter.js","components/App.js","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firebaseInstance","authService","auth","dbService","firestore","storageService","storage","AuthForm","useState","email","setEmail","password","setPassword","newAccount","setNewAccount","error","setError","onChange","e","target","name","value","onSubmit","a","preventDefault","createUserWithEmailAndPassword","data","signInWithEmailAndPassword","console","log","message","className","type","placeholder","required","onClick","prev","Auth","onSocialClick","provider","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","icon","faTwitter","color","size","style","marginBottom","faGoogle","faGithub","Date","getFullYear","href","rel","Chat","chatObj","isOwner","editing","setEditing","text","newchat","setNewchat","onDeleteClick","window","confirm","doc","id","delete","refFromURL","attachmentUrl","toggleEditing","event","update","autoFocus","src","alt","class","faTrash","faPencilAlt","ChatMaker","userObj","chat","setChat","attachment","setAttachment","attachmentRef","ref","child","uid","uuidv4","putString","response","getDownloadURL","createAt","now","creatorID","collection","add","maxLength","for","faPlus","accept","theFile","files","reader","FileReader","onloadend","finishedEvent","result","currentTarget","readAsDataURL","opacity","backgroundImage","faTimes","Home","chats","setChats","useEffect","orderBy","onSnapshot","snapshot","chatArray","docs","map","marginTop","Profile","refreshUser","history","useHistory","displayName","newDisplayName","setNewDisplayName","updateProfile","getChats","where","get","signOut","push","Navigation","to","faUser","AppRouter","isLoggedIn","basename","exact","path","App","useTitle","init","setInit","setUserObj","onAuthStateChanged","user","ind","indexOf","end","substring","args","currentUser","Boolean","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c395ba5c.chunk.js","sourcesContent":["// Firebase App (the core Firebase SDK) is always required and must be listed first\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nimport \"firebase/storage\";\n\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGIN_ID,\n  appId: process.env.REACT_APP_APP_APP_ID,\n};\n\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport const firebaseInstance = firebase;\nexport const authService = firebase.auth();\nexport const dbService = firebase.firestore();\nexport const storageService = firebase.storage();\n","import React, { useState } from \"react\";\nimport { authService } from \"../fbase\";\n\nconst AuthForm = () => {\n  // set state email, password, newAccount\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [newAccount, setNewAccount] = useState(true);\n  const [error, setError] = useState(\"\");\n\n  // function\n  // onchange to email, password\n  const onChange = (e) => {\n    const {\n      target: { name, value },\n    } = e;\n    if (name === \"email\") {\n      setEmail(value);\n    } else if (name === \"password\") {\n      setPassword(value);\n    }\n  };\n  const toggleAccount = () => setNewAccount((prev) => !prev);\n\n  // 기본적인 실행 (refresh 된 담에 url 에 value 값 나오는것) 하지 않기 위해 preventDefault()\n  const onSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      let data;\n      if (newAccount) {\n        // create account\n        data = await authService.createUserWithEmailAndPassword(\n          email,\n          password\n        );\n      } else {\n        // log in\n        data = await authService.signInWithEmailAndPassword(email, password);\n      }\n      console.log(data);\n    } catch (error) {\n      setError(error.message);\n    }\n  };\n\n  return (\n    <>\n      <form onSubmit={onSubmit} className=\"container\">\n        <input\n          name=\"email\"\n          type=\"email\"\n          placeholder=\"Email\"\n          required\n          value={email}\n          onChange={onChange}\n          className=\"authInput\"\n        />\n        <input\n          name=\"password\"\n          type=\"password\"\n          placeholder=\"Password\"\n          required\n          value={password}\n          className=\"authInput\"\n          onChange={onChange}\n        />\n        <input\n          type=\"submit\"\n          className=\"authInput authSubmit\"\n          value={newAccount ? \"Create Account\" : \"Sign In\"}\n        />\n        {error && <span className=\"authError\">{error}</span>}\n      </form>\n      <span onClick={toggleAccount} className=\"authSwitch\">\n        {newAccount ? \"Sign In\" : \"Create Account\"}\n      </span>\n    </>\n  );\n};\n\nexport default AuthForm;\n","import {\n  faGithub,\n  faGoogle,\n  faTwitter,\n} from \"@fortawesome/free-brands-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React from \"react\";\nimport { AiFillGithub, AiOutlineHome, AiOutlineMail } from \"react-icons/ai\";\nimport AuthForm from \"../components/AuthForm\";\nimport { authService, firebaseInstance } from \"../fbase\";\n\nconst Auth = () => {\n  // Social login function\n  const onSocialClick = async (e) => {\n    const {\n      target: { name },\n    } = e;\n    let provider;\n    if (name === \"google\") {\n      provider = new firebaseInstance.auth.GoogleAuthProvider();\n    } else if (name === \"github\") {\n      provider = new firebaseInstance.auth.GithubAuthProvider();\n    }\n    await authService.signInWithPopup(provider);\n  };\n\n  return (\n    <>\n      <div className=\"authContainer\">\n        <FontAwesomeIcon\n          icon={faTwitter}\n          color={\"#04AAFF\"}\n          size=\"3x\"\n          style={{ marginBottom: 30 }}\n        />\n        <AuthForm />\n        <div className=\"authBtns\">\n          <button onClick={onSocialClick} name=\"google\" className=\"authBtn\">\n            Continue with Google <FontAwesomeIcon icon={faGoogle} />\n          </button>\n          <button onClick={onSocialClick} name=\"github\" className=\"authBtn\">\n            Continue with Github <FontAwesomeIcon icon={faGithub} />\n          </button>\n        </div>\n        <div className=\"footer\">\n          <footer className=\"footer__text\">\n            &copy; {new Date().getFullYear()} Jacob Ko\n          </footer>\n          <div className=\"footer__logo\">\n            <a href=\"https://jacobko.info/\" target=\"_blank\" rel=\"noreferrer\">\n              <AiOutlineHome />\n            </a>\n            <a\n              href=\"https://github.com/jacobkosmart/chat-app-react-firebase\"\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              <AiFillGithub />\n              <a href=\"mailto: jacobkosmart@gmail.com\">\n                <AiOutlineMail />\n              </a>\n            </a>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Auth;\n","import React, { useState } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTrash, faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\nimport { dbService, storageService } from \"../fbase\";\n\nconst Chat = ({ chatObj, isOwner }) => {\n  const [editing, setEditing] = useState(false);\n  const [newchat, setNewchat] = useState(chatObj.text);\n\n  const onDeleteClick = async () => {\n    const ok = window.confirm(\"Are you sure you want to delete this ch?\");\n    if (ok) {\n      await dbService.doc(`chats/${chatObj.id}`).delete();\n      await storageService.refFromURL(chatObj.attachmentUrl).delete();\n    }\n  };\n  const toggleEditing = () => setEditing((prev) => !prev);\n  const onSubmit = async (event) => {\n    event.preventDefault();\n    await dbService.doc(`chats/${chatObj.id}`).update({\n      text: newchat,\n    });\n    setEditing(false);\n  };\n  const onChange = (event) => {\n    const {\n      target: { value },\n    } = event;\n    setNewchat(value);\n  };\n  return (\n    <div className=\"chat\">\n      {editing ? (\n        <>\n          <form onSubmit={onSubmit} className=\"container chatEdit\">\n            <input\n              type=\"text\"\n              placeholder=\"Edit your chat\"\n              value={newchat}\n              required\n              autoFocus\n              onChange={onChange}\n              className=\"formInput\"\n            />\n            <input type=\"submit\" value=\"Update chat\" className=\"formBtn\" />\n          </form>\n          <span onClick={toggleEditing} className=\"formBtn cancelBtn\">\n            Cancel\n          </span>\n        </>\n      ) : (\n        <>\n          <h4>{chatObj.text}</h4>\n          {chatObj.attachmentUrl && <img src={chatObj.attachmentUrl} alt=\"\" />}\n          {isOwner && (\n            <div class=\"chat__actions\">\n              <span onClick={onDeleteClick}>\n                <FontAwesomeIcon icon={faTrash} />\n              </span>\n              <span onClick={toggleEditing}>\n                <FontAwesomeIcon icon={faPencilAlt} />\n              </span>\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Chat;\n","import React, { useState } from \"react\";\nimport { dbService, storageService } from \"../fbase\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlus, faTimes } from \"@fortawesome/free-solid-svg-icons\";\n\nconst ChatMaker = ({ userObj }) => {\n  // State\n  const [chat, setChat] = useState(\"\");\n  const [attachment, setAttachment] = useState(\"\");\n\n  // Submit Function\n  const onSubmit = async (e) => {\n    if (chat === \"\") {\n      return;\n    }\n    e.preventDefault();\n    let attachmentUrl = \"\";\n    if (attachment !== \"\") {\n      const attachmentRef = storageService\n        .ref()\n        .child(`${userObj.uid}/${uuidv4()}`);\n      const response = await attachmentRef.putString(attachment, \"data_url\");\n      attachmentUrl = await response.ref.getDownloadURL();\n    }\n    const chatObj = {\n      text: chat,\n      createAt: Date.now(),\n      creatorID: userObj.uid,\n      attachmentUrl,\n    };\n    await dbService.collection(\"chats\").add(chatObj);\n\n    // 사용자 마다 collection 만들기 예시\n    // await dbService.collection(`${userObj.uid}`).add(chatObj);\n    // db 에 등록한 후, 다시 초기화 함\n    setChat(\"\");\n    setAttachment(\"\");\n  };\n  const onChange = (e) => {\n    const {\n      target: { value },\n    } = e;\n    setChat(value);\n  };\n\n  // fileUpload function\n  const onFileChange = (e) => {\n    // es6 의 구조분해 할당 target 안에 files 를 event listener 로 받은 값을 files 에 저장\n    const {\n      target: { files },\n    } = e;\n    // 배열의 첫번째 파일만 theFile 로 선언하고 fileReader API 를 통해 이미지 파일 읽기\n    const theFile = files[0];\n    const reader = new FileReader();\n    reader.onloadend = (finishedEvent) => {\n      const {\n        currentTarget: { result },\n      } = finishedEvent;\n      setAttachment(result);\n    };\n    reader.readAsDataURL(theFile);\n  };\n  // Delete Photo\n  const onClearAttachment = () => {\n    setAttachment(\"\");\n  };\n\n  return (\n    <>\n      <form onSubmit={onSubmit} className=\"makerForm\">\n        <div className=\"makerInput__container\">\n          <input\n            value={chat}\n            onChange={onChange}\n            type=\"text\"\n            placeholder=\"당신의 생각을 적어주세요\"\n            maxLength={120}\n            className=\"makerInput__input\"\n          />\n          <input type=\"submit\" value=\"&rarr;\" className=\"makerInput__arrow\" />\n        </div>\n        <label for=\"attach-file\" className=\"makerInput__label\">\n          <span>Add photos</span>\n          <FontAwesomeIcon icon={faPlus} />\n        </label>\n        <input\n          id=\"attach-file\"\n          type=\"file\"\n          accept=\"image/*\"\n          onChange={onFileChange}\n          style={{\n            opacity: 0,\n          }}\n        />\n        {attachment && (\n          <div className=\"makerForm__attachment\">\n            <img\n              src={attachment}\n              style={{\n                backgroundImage: attachment,\n              }}\n              alt=\"img\"\n            />\n            <div onClick={onClearAttachment} className=\"makerForm__clear\">\n              <span>Remove</span>\n              <FontAwesomeIcon icon={faTimes} />\n            </div>\n          </div>\n        )}\n      </form>\n    </>\n  );\n};\n\nexport default ChatMaker;\n","import React, { useEffect, useState } from \"react\";\nimport Chat from \"../components/Chat\";\nimport ChatMaker from \"../components/ChatMaker\";\nimport { dbService } from \"../fbase\";\n\nconst Home = ({ userObj }) => {\n  const [chats, setChats] = useState([]);\n  useEffect(() => {\n    dbService\n      .collection(\"chats\")\n      .orderBy(\"createAt\", \"desc\")\n      .onSnapshot((snapshot) => {\n        const chatArray = snapshot.docs.map((doc) => ({\n          id: doc.id,\n          ...doc.data(),\n        }));\n        setChats(chatArray);\n      });\n  }, []);\n  return (\n    <div className=\"container\">\n      <ChatMaker userObj={userObj} />\n      <div style={{ marginTop: 20 }}>\n        {chats.map((chat) => (\n          <Chat\n            key={chat.id}\n            chatObj={chat}\n            isOwner={chat.creatorID === userObj.uid}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\nexport default Home;\n","import React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { authService, dbService } from \"../fbase\";\n\nconst Profile = ({ refreshUser, userObj }) => {\n  const history = useHistory();\n  const [newDisplayName, setNewDisplayName] = useState(userObj.displayName);\n\n  const onLogOutClick = () => {\n    authService.signOut();\n    history.push(\"/\");\n  };\n\n  const onChange = (e) => {\n    const {\n      target: { value },\n    } = e;\n    setNewDisplayName(value);\n  };\n\n  const onSubmit = async (e) => {\n    e.preventDefault();\n    if (userObj.displayName !== newDisplayName) {\n      await userObj.updateProfile({\n        displayName: newDisplayName,\n      });\n      refreshUser();\n    }\n  };\n\n  // profile 에서 user uid 에 따른 데이터 가져오기 예시\n  const getChats = async () => {\n    const chats = await dbService\n      .collection(\"chats\")\n      .where(\"creatorID\", \"==\", userObj.uid)\n      .orderBy(\"createAt\")\n      .get();\n    console.log(chats.docs.map((doc) => doc.data()));\n  };\n\n  // Edit Profile\n  useEffect(() => {\n    getChats();\n  }, []);\n\n  return (\n    <div className=\"container\">\n      <form onSubmit={onSubmit} className=\"profileForm\">\n        <input\n          onChange={onChange}\n          type=\"text\"\n          autoFocus\n          placeholder=\"Display name\"\n          value={newDisplayName}\n          className=\"formInput\"\n        />\n        <input\n          type=\"submit\"\n          value=\"Update Profile\"\n          className=\"formBtn\"\n          style={{\n            marginTop: 10,\n          }}\n        />\n      </form>\n\n      <span className=\"formBtn cancelBtn logOut\" onClick={onLogOutClick}>\n        Log Out\n      </span>\n    </div>\n  );\n};\nexport default Profile;\n","import { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\nimport { faUser } from \"@fortawesome/free-regular-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst Navigation = ({ userObj }) => {\n  return (\n    <>\n      <ul className=\"ulNav\">\n        <li>\n          <Link to=\"/\" className=\"homeLink\">\n            <FontAwesomeIcon\n              icon={faTwitter}\n              className=\"chatLogo\"\n              color={\"#04AAFF\"}\n              size=\"2x\"\n            />\n          </Link>\n        </li>\n        <li>\n          <Link to=\"/profile\" className=\"profileLink\">\n            <FontAwesomeIcon icon={faUser} color={\"#04AAFF\"} size=\"2x\" />\n            <span className=\"profileText\">\n              {userObj.displayName\n                ? `${userObj.displayName} 의 Profile`\n                : \"Add your Name\"}\n            </span>\n          </Link>\n        </li>\n      </ul>\n    </>\n  );\n};\n\nexport default Navigation;\n","import React from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport Auth from \"../routes/Auth\";\nimport Home from \"../routes/Home\";\nimport Profile from \"../routes/Profile\";\nimport Navigation from \"./Navigation\";\n\nconst AppRouter = ({ refreshUser, isLoggedIn, userObj }) => {\n  return (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      {isLoggedIn && <Navigation userObj={userObj} />}\n      <Switch>\n        {isLoggedIn ? (\n          <>\n            <div className=\"routerContainer\">\n              <Route exact path=\"/\">\n                <Home userObj={userObj} />\n              </Route>\n              <Route exact path=\"/profile\">\n                <Profile userObj={userObj} refreshUser={refreshUser} />\n              </Route>\n            </div>\n          </>\n        ) : (\n          <>\n            <Route exact path=\"/\">\n              <Auth />\n            </Route>\n          </>\n        )}\n      </Switch>\n    </BrowserRouter>\n  );\n};\n\nexport default AppRouter;\n","import React, { useEffect, useState } from \"react\";\nimport useTitle from \"@jacob-hooks/use-title\";\nimport { authService } from \"../fbase\";\nimport AppRouter from \"./AppRouter\";\nimport { AiFillGithub, AiOutlineHome, AiOutlineMail } from \"react-icons/ai\";\n\nfunction App() {\n  useTitle(\"Chat-app\");\n  // authService.currentUser 를 통해 로그인 되었는지 안되었는지 확인 할 수 있음 (로그인 안되어 있으면 null 이 return )\n  const [init, setInit] = useState(false);\n  const [userObj, setUserObj] = useState(null);\n\n  useEffect(() => {\n    authService.onAuthStateChanged((user) => {\n      if (user) {\n        if (user.displayName === null) {\n          const ind = user.email.indexOf(\"@\");\n          const end = user.email.substring(0, ind);\n          user.updateProfile({ displayName: end });\n        }\n        setUserObj({\n          displayName: user.displayName,\n          uid: user.uid,\n          updateProfile: (args) => user.updateProfile(args),\n        });\n\n        // console.log 해보면 user 의 정보의 양이 많기 때문에 setUserObj 에서 필요한 정보만 불러 올수 있게 지정해줌 (App 구동 속도 향상됨 )\n        // console.log(user);\n        // 다른 방법으로 user 를 전체 가지고 온다음에 Object.assign() 하는 방법\n        // setUserObj(user);\n      } else {\n        setUserObj(null);\n      }\n      setInit(true);\n    });\n  }, []);\n\n  // user edit re-render\n  // userObj 의 정보의 양이 많기 때문에 react 에서 re-render 가 되지 않기 때문에 필요한 정보만 불러와서 사용해야 함\n  const refreshUser = () => {\n    const user = authService.currentUser;\n    console.log(authService.currentUser.displayName);\n    setUserObj({\n      displayName: user.displayName,\n      uid: user.uid,\n      updateProfile: (args) => user.updateProfile(args),\n    });\n    // Object.assign() 하는 방식 :target 과 source 가 필요한데 기본적으로 빈 object 와 source 가 필요한데 비어 있는 object 안에 user 사본이 새 object 로 생성 되는데 그때 react 에서 새로운 object 가 생성됬기 때문에 re-render 과정을 함 (첫번째 방법을 추천 앱 구동 속도 관련때문에 )\n    // setUserObj(Object.assign({}, user));\n  };\n\n  return (\n    <>\n      {init ? (\n        <AppRouter\n          basename={process.env.PUBLIC_URL}\n          refreshUser={refreshUser}\n          isLoggedIn={Boolean(userObj)}\n          userObj={userObj}\n        />\n      ) : (\n        \"Initializing....\"\n      )}\n      <div className=\"footer\">\n        <footer className=\"footer__text\">\n          &copy; {new Date().getFullYear()} Jacob Ko\n        </footer>\n        <div className=\"footer__logo\">\n          <a href=\"https://jacobko.info/\" target=\"_blank\" rel=\"noreferrer\">\n            <AiOutlineHome />\n          </a>\n          <a\n            href=\"https://github.com/jacobkosmart\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            <AiFillGithub />\n            <a href=\"mailto: jacobkosmart@gmail.com\">\n              <AiOutlineMail />\n            </a>\n          </a>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport \"./main.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}