{"version":3,"sources":["fbase.js","components/AuthFrom.js","routes/Auth.js","components/Chat.js","components/ChatMaker.js","routes/Home.js","routes/Profile.js","components/Navigation.js","components/AppRouter.js","components/App.js","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firebaseInstance","authService","auth","dbService","firestore","storageService","storage","AuthFrom","useState","email","setEmail","password","setPassword","newAccount","setNewAccount","error","setError","onChange","e","target","name","value","onSubmit","a","preventDefault","createUserWithEmailAndPassword","data","signInWithEmailAndPassword","console","log","message","className","type","placeholder","required","onClick","prev","Auth","onSocialClick","provider","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","Chat","chatObj","isOwner","editing","setEditing","text","newChat","setNewChat","onDeleteClick","window","confirm","doc","id","delete","refFromURL","attachmentUrl","toggleEditing","update","src","width","height","alt","ChatMaker","userObj","chat","setChat","attachment","setAttachment","attachmentRef","ref","child","uid","uuidv4","putString","response","getDownloadURL","createAt","Date","now","creatorID","collection","add","maxLength","accept","theFile","files","reader","FileReader","onloadend","finishedEvent","result","currentTarget","readAsDataURL","Home","chats","setChats","useEffect","orderBy","onSnapshot","snapshot","chatArray","docs","map","Profile","refreshUser","history","useHistory","displayName","newDisplayName","setNewDisplayName","updateProfile","signOut","push","Navigation","to","AppRouter","isLoggedIn","basename","exact","path","App","useTitle","init","setInit","setIsLoggedIn","setUserObj","onAuthStateChanged","user","args","currentUser","getFullYear","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bcdcef40.chunk.js","sourcesContent":["// Firebase App (the core Firebase SDK) is always required and must be listed first\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nimport \"firebase/storage\";\n\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGIN_ID,\n  appId: process.env.REACT_APP_APP_APP_ID,\n};\n\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport const firebaseInstance = firebase;\nexport const authService = firebase.auth();\nexport const dbService = firebase.firestore();\nexport const storageService = firebase.storage();\n","import React, { useState } from \"react\";\nimport { authService } from \"../fbase\";\n\nconst AuthFrom = () => {\n  // set state email, password, newAccount\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [newAccount, setNewAccount] = useState(true);\n  const [error, setError] = useState(\"\");\n\n  // function\n  // onchange to email, password\n  const onChange = (e) => {\n    const {\n      target: { name, value },\n    } = e;\n    if (name === \"email\") {\n      setEmail(value);\n    } else if (name === \"password\") {\n      setPassword(value);\n    }\n  };\n  const toggleAccount = () => setNewAccount((prev) => !prev);\n\n  // 기본적인 실행 (refresh 된 담에 url 에 value 값 나오는것) 하지 않기 위해 preventDefault()\n  const onSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      let data;\n      if (newAccount) {\n        // create account\n        data = await authService.createUserWithEmailAndPassword(\n          email,\n          password\n        );\n      } else {\n        // log in\n        data = await authService.signInWithEmailAndPassword(email, password);\n      }\n      console.log(data);\n    } catch (error) {\n      setError(error.message);\n    }\n  };\n\n  return (\n    <>\n      <form onSubmit={onSubmit} className=\"container\">\n        <input\n          name=\"email\"\n          type=\"email\"\n          placeholder=\"Email\"\n          required\n          value={email}\n          onChange={onChange}\n        />\n        <input\n          name=\"password\"\n          type=\"password\"\n          placeholder=\"Password\"\n          required\n          value={password}\n          onChange={onChange}\n        />\n        <input\n          type=\"submit\"\n          value={newAccount ? \"Create Account\" : \"Sign In\"}\n        />\n        {error}\n      </form>\n      <div>\n        <p>\n          {newAccount\n            ? \"Do you have already Account?\"\n            : \"Now you can create account\"}\n        </p>\n        <span onClick={toggleAccount}>\n          {newAccount ? \"Sign In\" : \"Create account\"}\n        </span>\n      </div>\n    </>\n  );\n};\n\nexport default AuthFrom;\n","import React from \"react\";\nimport AuthFrom from \"../components/AuthFrom\";\nimport { authService, firebaseInstance } from \"../fbase\";\n\nconst Auth = () => {\n  // Social login function\n  const onSocialClick = async (e) => {\n    const {\n      target: { name },\n    } = e;\n    let provider;\n    if (name === \"google\") {\n      provider = new firebaseInstance.auth.GoogleAuthProvider();\n    } else if (name === \"github\") {\n      provider = new firebaseInstance.auth.GithubAuthProvider();\n    }\n    const data = await authService.signInWithPopup(provider);\n    console.log(data);\n  };\n\n  return (\n    <>\n      <AuthFrom />\n      <div>\n        <button onClick={onSocialClick} name=\"google\">\n          Continue with Google\n        </button>\n        <button onClick={onSocialClick} name=\"github\">\n          Continue with Github\n        </button>\n      </div>\n    </>\n  );\n};\n\nexport default Auth;\n","import React, { useState } from \"react\";\nimport { dbService, storageService } from \"../fbase\";\n\nconst Chat = ({ chatObj, isOwner }) => {\n  // State\n  const [editing, setEditing] = useState(false);\n  const [newChat, setNewChat] = useState(chatObj.text);\n\n  // Delete function\n  const onDeleteClick = async () => {\n    const check = window.confirm(\"정말로 메세지를 삭제하시겠습니까?\");\n    if (check) {\n      // delete chat\n      await dbService.doc(`chats/${chatObj.id}`).delete();\n      // delete uploadFile\n      await storageService.refFromURL(chatObj.attachmentUrl).delete();\n    }\n  };\n\n  // Edit function\n  const toggleEditing = () => setEditing((prev) => !prev);\n  const onSubmit = async (e) => {\n    e.preventDefault();\n    await dbService.doc(`chats/${chatObj.id}`).update({\n      text: newChat,\n    });\n    setEditing(false);\n  };\n  const onChange = (e) => {\n    const {\n      target: { value },\n    } = e;\n    setNewChat(value);\n  };\n\n  return (\n    <>\n      <div>\n        {editing ? (\n          <>\n            {\" \"}\n            {isOwner && (\n              <>\n                <form onSubmit={onSubmit}>\n                  <input\n                    type=\"text\"\n                    placeholder=\"Edit your Chat\"\n                    value={newChat}\n                    required\n                    onChange={onChange}\n                  />\n                  <input type=\"submit\" value=\"Update Chat\" />\n                </form>\n                <button onClick={toggleEditing}>Cancel</button>\n              </>\n            )}\n          </>\n        ) : (\n          <>\n            <h4>{chatObj.text}</h4>\n            {chatObj.attachmentUrl && (\n              <img\n                src={chatObj.attachmentUrl}\n                width=\"50px\"\n                height=\"50px\"\n                alt=\"img\"\n              />\n            )}\n            {isOwner && (\n              <>\n                <button onClick={onDeleteClick}>Delete Chat</button>\n                <button onClick={toggleEditing}>Edit Chat</button>\n              </>\n            )}\n          </>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default Chat;\n","import React, { useState } from \"react\";\nimport { dbService, storageService } from \"../fbase\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nconst ChatMaker = ({ userObj }) => {\n  // State\n  const [chat, setChat] = useState(\"\");\n  const [attachment, setAttachment] = useState(\"\");\n\n  // Submit Function\n  const onSubmit = async (e) => {\n    e.preventDefault();\n    let attachmentUrl = \"\";\n    if (attachment !== \"\") {\n      const attachmentRef = storageService\n        .ref()\n        .child(`${userObj.uid}/${uuidv4()}`);\n      const response = await attachmentRef.putString(attachment, \"data_url\");\n      attachmentUrl = await response.ref.getDownloadURL();\n    }\n    const chatObj = {\n      text: chat,\n      createAt: Date.now(),\n      creatorID: userObj.uid,\n      attachmentUrl,\n    };\n    await dbService.collection(\"chats\").add(chatObj);\n    // db 에 등록한 후, 다시 초기화 함\n    setChat(\"\");\n    setAttachment(\"\");\n  };\n  const onChange = (e) => {\n    const {\n      target: { value },\n    } = e;\n    setChat(value);\n  };\n\n  // fileUpload function\n  const onFileChange = (e) => {\n    // es6 의 구조분해 할당 target 안에 files 를 event listener 로 받은 값을 files 에 저장\n    const {\n      target: { files },\n    } = e;\n    // 배열의 첫번째 파일만 theFile 로 선언하고 fileReader API 를 통해 이미지 파일 읽기\n    const theFile = files[0];\n    const reader = new FileReader();\n    reader.onloadend = (finishedEvent) => {\n      const {\n        currentTarget: { result },\n      } = finishedEvent;\n      setAttachment(result);\n    };\n    reader.readAsDataURL(theFile);\n  };\n  // Delete Photo\n  const onClearAttachment = () => {\n    setAttachment(null);\n  };\n\n  return (\n    <>\n      <form onSubmit={onSubmit}>\n        <input\n          value={chat}\n          onChange={onChange}\n          type=\"text\"\n          placeholder=\"what's on your mind?\"\n          maxLength={120}\n        />\n        <input type=\"file\" accept=\"image/*\" onChange={onFileChange} />\n        <input type=\"submit\" value=\"chat\" />\n        {attachment && (\n          <div>\n            <img src={attachment} alt=\"img\" width=\"50px\" height=\"50px\" />\n            <button onClick={onClearAttachment}>Clear Photo</button>\n          </div>\n        )}\n      </form>\n    </>\n  );\n};\n\nexport default ChatMaker;\n","import React, { useEffect, useState } from \"react\";\nimport Chat from \"../components/Chat\";\nimport ChatMaker from \"../components/ChatMaker\";\nimport { dbService, storageService } from \"../fbase\";\n\nconst Home = ({ userObj }) => {\n  // State\n\n  const [chats, setChats] = useState([]);\n\n  // read DB realtime\n  useEffect(() => {\n    dbService\n      .collection(\"chats\")\n      .orderBy(\"createAt\", \"desc\")\n      .onSnapshot((snapshot) => {\n        const chatArray = snapshot.docs.map((doc) => ({\n          id: doc.id,\n          ...doc.data(),\n        }));\n        setChats(chatArray);\n      });\n  }, []);\n\n  return (\n    <div>\n      <>\n        <ChatMaker userObj={userObj} />\n        <div>\n          {chats.map((chat) => (\n            <Chat\n              key={chat.id}\n              chatObj={chat}\n              isOwner={chat.creatorID === userObj.uid}\n            />\n          ))}\n        </div>\n      </>\n    </div>\n  );\n};\n\nexport default Home;\n","import React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { authService } from \"../fbase\";\n\nconst Profile = ({ refreshUser, userObj }) => {\n  const history = useHistory();\n  const [newDisplayName, setNewDisplayName] = useState(userObj.displayName);\n\n  const onLogOutClick = () => {\n    authService.signOut();\n    history.push(\"/\");\n  };\n\n  const onChange = (e) => {\n    const {\n      target: { value },\n    } = e;\n    setNewDisplayName(value);\n  };\n\n  const onSubmit = async (e) => {\n    e.preventDefault();\n    if (userObj.displayName !== newDisplayName) {\n      await userObj.updateProfile({\n        displayName: newDisplayName,\n      });\n      refreshUser();\n    }\n  };\n  // profile 에서 user uid 에 따른 데이터 가져오기 예시\n  // const getChats = async () => {\n  //   const chats = await dbService\n  //     .collection(\"chats\")\n  //     .where(\"creatorID\", \"==\", userObj.uid)\n  //     .orderBy(\"createAt\")\n  //     .get();\n  //   console.log(chats.docs.map((doc) => doc.data()));\n  // };\n\n  // // Edit Profile\n  // useEffect(() => {\n  //   getChats();\n  // }, []);\n\n  return (\n    <>\n      <form onSubmit={onSubmit}>\n        <input\n          onChange={onChange}\n          type=\"text\"\n          placeholder=\"Display name\"\n          value={newDisplayName}\n        />\n        <input type=\"submit\" value=\"Update Profile\" />\n      </form>\n      <button onClick={onLogOutClick}>Log Out</button>\n    </>\n  );\n};\n\nexport default Profile;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst Navigation = ({ userObj }) => {\n  return (\n    <>\n      <ul>\n        <li>\n          <Link to=\"/\">Home</Link>\n        </li>\n        <li>\n          <Link to=\"/profile\"> Hi, {userObj.displayName} </Link>\n        </li>\n      </ul>\n    </>\n  );\n};\n\nexport default Navigation;\n","import React from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport Auth from \"../routes/Auth\";\nimport Home from \"../routes/Home\";\nimport Profile from \"../routes/Profile\";\nimport Navigation from \"./Navigation\";\n\nconst AppRouter = ({ refreshUser, isLoggedIn, userObj }) => {\n  return (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      {isLoggedIn && <Navigation userObj={userObj} />}\n      <Switch>\n        {isLoggedIn ? (\n          <>\n            <Route exact path=\"/\">\n              <Home userObj={userObj} />\n            </Route>\n            <Route exact path=\"/profile\">\n              <Profile userObj={userObj} refreshUser={refreshUser} />\n            </Route>\n          </>\n        ) : (\n          <>\n            <Route exact path=\"/\">\n              <Auth />\n            </Route>\n          </>\n        )}\n      </Switch>\n    </BrowserRouter>\n  );\n};\n\nexport default AppRouter;\n","import React, { useEffect, useState } from \"react\";\nimport useTitle from \"@jacob-hooks/use-title\";\nimport { authService } from \"../fbase\";\nimport AppRouter from \"./AppRouter\";\n\nfunction App() {\n  useTitle(\"Chat-app\");\n  // authService.currentUser 를 통해 로그인 되었는지 안되었는지 확인 할 수 있음 (로그인 안되어 있으면 null 이 return )\n  const [init, setInit] = useState(false);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [userObj, setUserObj] = useState(null);\n\n  useEffect(() => {\n    authService.onAuthStateChanged((user) => {\n      if (user) {\n        setIsLoggedIn(true);\n        // console.log 해보면 user 의 정보의 양이 많기 때문에 setUserObj 에서 필요한 정보만 불러 올수 있게 지정해줌 (App 구동 속도 향상됨 )\n        // console.log(user);\n        setUserObj({\n          displayName: user.displayName,\n          uid: user.uid,\n          updateProfile: (args) => user.updateProfile(args),\n        });\n        // 다른 방법으로 user 를 전체 가지고 온다음에 Object.assign() 하는 방법\n        // setUserObj(user);\n      } else {\n        setIsLoggedIn(false);\n      }\n      setInit(true);\n    });\n  }, []);\n\n  // user edit re-render\n  // userObj 의 정보의 양이 많기 때문에 react 에서 re-render 가 되지 않기 때문에 필요한 정보만 불러와서 사용해야 함\n  const refreshUser = () => {\n    const user = authService.currentUser;\n    // console.log(authService.currentUser.displayName);\n    setUserObj({\n      displayName: user.displayName,\n      uid: user.uid,\n      updateProfile: (args) => user.updateProfile(args),\n    });\n    // Object.assign() 하는 방식 :target 과 source 가 필요한데 기본적으로 빈 object 와 source 가 필요한데 비어 있는 object 안에 user 사본이 새 object 로 생성 되는데 그때 react 에서 새로운 object 가 생성됬기 때문에 re-render 과정을 함 (첫번째 방법을 추천 앱 구동 속도 관련때문에 )\n    // setUserObj(Object.assign({}, user));\n  };\n\n  return (\n    <>\n      {init ? (\n        <AppRouter\n          refreshUser={refreshUser}\n          isLoggedIn={isLoggedIn}\n          userObj={userObj}\n        />\n      ) : (\n        \"Initializing....\"\n      )}\n      <footer>&copy; {new Date().getFullYear()} Jacob Ko</footer>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}